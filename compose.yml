services:
  frontend:
    build:
      context: .
      target: frontend-final

    restart: unless-stopped
    ports:
      - "${CLIENT_SOCKET}:3000"
    environment:
      - API_URL=${API_URL}
    networks:
      - front_facing
  backend:
    build:
      context: .
      target: backend-final

    restart: always
    ports:
      - "${API_SOCKET}:3000"
    environment:
      - DB_CONN_STRING=postgresql://postgres:password@db:5432/messages
    networks:
      - test_chat_dbnet
    depends_on:
      db:
        condition: service_healthy
  db:
    build: ./db
    restart: always

    shm_size: 128mb

    environment:
      POSTGRES_PASSWORD: password

    volumes:
      - test_chat_pgdb:/var/lib/postgresql/data

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 1s
      timeout: 5s
      retries: 10

    networks:
      - test_chat_dbnet

volumes:
  test_chat_pgdb:


networks:
  test_chat_dbnet:
  front_facing:
